apiVersion: v1
kind: ConfigMap
metadata:
  name: create-and-delete-script
data:
  create-and-delete.sh: |-
    #!/bin/sh

    # Test we can successfully manage configmaps (should succeed)
    kubectl create -f /script/configmaps-role.yaml
    kubectl delete rolebinding configmaps
    kubectl delete role configmaps
    
    # Test that we can't manage secrets (should fail)
    kubectl create -f /script/secrets-role.yaml
    kubectl delete rolebinding secrets
    kubectl delete role secrets

    # Test if we can delete existing roles/bindings with more permissions
    kubectl delete rolebinding everything
    kubectl delete role everything
  configmaps-role.yaml: |-
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: configmaps
    rules:
      - apiGroups:
          - ""
        resources:
          - "configmaps"
        verbs:
          - "get"
          - "list"
          - "watch"
    ---
    kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: configmaps
    subjects:
      - kind: ServiceAccount
        name: notimportant
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: configmaps
  secrets-role.yaml: |-
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: secrets
    rules:
      - apiGroups:
          - ""
        resources:
          - "secrets"
        verbs:
          - "get"
          - "list"
          - "watch"
    ---
    kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: secrets
    subjects:
      - kind: ServiceAccount
        name: notimportant
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: secrets
---
apiVersion: v1
kind: Pod
metadata:
  name: create-and-delete-rbac
spec:
  serviceAccountName: assign-configmaps
  containers:
  - image: docker.io/bitnami/kubectl
    name: script
    command: ["/bin/sh"]
    args: ["-c", "while true; do sh /script/create-and-delete.sh; sleep 5; done;"]
    volumeMounts:
    - mountPath: /script
      name: create-and-delete-script
  volumes:
  - name: create-and-delete-script
    configMap:
      name: create-and-delete-script